# noinspection GraphQLTypeRedefinition
scalar Date
scalar FloatNaN

input FeatureInput {
    featureId: ID,
    featureName: String,
    protocolId: ID,
    protocolName: String
}

input PlateFilterOptions {
    validatedBy: String,
    validateOnBegin: Date,
    validateOnEnd: Date,
    approvedBy: String,
    approvedOnBegin: Date,
    approvedOnEnd: Date,
    includeInvalidatedPlates: Boolean,
    includeDisapprovedPlates: Boolean,
}

input ExportPlateDataOptions {
    experimentId: ID,
    selectedFeatures: [FeatureInput],
    plateFilterOptions: PlateFilterOptions,
    includeSummeryPlateSummery: Boolean,
    includeFeatureStats: Boolean,
    includeWellTypeFeatureStats: Boolean
}

input ExportWellDataOptions {
    experimentId: ID,
    selectedFeatures: [FeatureInput],
    plateFilterOptions: PlateFilterOptions,
    includeRejectedWells: Boolean ,
    includeInvalidatedWells: Boolean,
    wellTypeFilter: [String],
    includeBasicCurveProperties: Boolean,
    includeAllCurveProperties: Boolean
}

type StatValueRecord {
    name: String,
    value: FloatNaN
}

type FeatureStatsRecord {
    resultSetId: Int,
    protocolId: Int,
    protocolName: String,
    featureId: Int,
    featureName: String,
    wellType: String,
    stats: [StatValueRecord]
}

type PlateDataRecord {
    experimentId: ID,
    experimentName: String
    plateId: ID,
    barcode: String,
    plateTemplateId: ID,
    plateTemplateName: String,
    validationStatus: String,
    validatedBy: String,
    validatedOn: String,
    approvalStatus: String,
    approvedBy: String,
    approvedOn: String,
    comment: String,
    drc_count: Int,
    sdp_count: Int,
    features: [FeatureStatsRecord]
}


type FeatureValueRecord {
    featureId: Int,
    featureName: String,
    protocolId: ID,
    protocolName: String,
    resultSetId: ID,
    value: FloatNaN
}

type WellDataRecord {
    experimentId: ID,
    experimentName: String
    plateId: ID,
    barcode: String,
    plateTemplateId: ID,
    plateTemplateName: String,
    validationStatus: String,
    approvalStatus: String,
    comment: String,
    wellId: ID,
    wellNr: Int,
    rowNr: Int,
    columnNr: Int,
    wellType: String,
    substanceName: String,
    substanceType: String,
    concentration: FloatNaN,
    isValid: Boolean,
    features: [FeatureValueRecord],
}

#enum WellStatus {
#    ACCEPTED_DEFAULT
#    ACCEPTED
#    REJECTED_PLATEPREP
#    REJECTED_DATACAPTURE
#    REJECTED_PHAEDRA
#    REJECTED_OUTLIER_PHAEDRA_MANUAL
#    REJECTED_OUTLIER_PHAEDRA_AUTO
#}
#
#type WellDTO {
#    id: ID
#    plateId: ID
#    row: Int
#    column: Int
#    wellNr: Int
#    wellType: String
#    status: WellStatus
#    description: String
#    wellSubstance: WellSubstanceDTO
#    tags: [String]
#}

type PropertyDTO {
    name: String!
    value: String
}

type ProjectDTO {
    id: ID!
    name: String
    description: String
    createdOn: Date
    createdBy: String
    updatedOn: Date
    updatedBy: String

    tags: [String]
    properties: [PropertyDTO]
}

input StringFilter {
    startsWith: String
    endsWith: String
    contains: String
    regex: String
}

input DateFilter {
    before: Date
    after: Date
    on: Date
}

input MetaDataFilter {
    containsTags: [String]
    containsProperties: [String]
}

input ProjectFilter {
    name: StringFilter
    createdOn: DateFilter
    createdBy: StringFilter
    updatedOn: DateFilter
    updatedBy: StringFilter
    tags: MetaDataFilter
    properties: MetaDataFilter
}

type Query {
    exportPlateListData(exportPlateDataOptions: ExportPlateDataOptions): [PlateDataRecord]
    exportWellData(exportWellDataOptions: ExportWellDataOptions): [WellDataRecord]
    projects(filter: ProjectFilter): [ProjectDTO]
}
