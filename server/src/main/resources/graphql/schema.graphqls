# noinspection GraphQLTypeRedefinition
scalar Date
scalar FloatNaN

input FeatureInput {
    featureId: ID,
    featureName: String,
    protocolId: ID,
    protocolName: String
}

input PlateFilterOptions {
    validatedBy: String,
    validateOnBegin: Date,
    validateOnEnd: Date,
    approvedBy: String,
    approvedOnBegin: Date,
    approvedOnEnd: Date,
    includeInvalidatedPlates: Boolean,
    includeDisapprovedPlates: Boolean,
}

input ExportPlateDataOptions {
    experimentId: ID,
    selectedFeatures: [FeatureInput],
    plateFilterOptions: PlateFilterOptions,
    includeSummeryPlateSummery: Boolean,
    includeFeatureStats: Boolean,
    includeWellTypeFeatureStats: Boolean
}

input ExportWellDataOptions {
    experimentId: ID,
    selectedFeatures: [FeatureInput],
    plateFilterOptions: PlateFilterOptions,
    includeRejectedWells: Boolean ,
    includeInvalidatedWells: Boolean,
    wellTypeFilter: [String],
    includeBasicCurveProperties: Boolean,
    includeAllCurveProperties: Boolean
}

type StatValueRecord {
    name: String,
    value: FloatNaN
}

type FeatureStatsRecord {
    resultSetId: Int,
    protocolId: Int,
    protocolName: String,
    featureId: Int,
    featureName: String,
    wellType: String,
    stats: [StatValueRecord]
}

type PlateDataRecord {
    experimentId: ID,
    experimentName: String
    plateId: ID,
    barcode: String,
    plateTemplateId: ID,
    plateTemplateName: String,
    validationStatus: String,
    validatedBy: String,
    validatedOn: String,
    approvalStatus: String,
    approvedBy: String,
    approvedOn: String,
    comment: String,
    drc_count: Int,
    sdp_count: Int,
    features: [FeatureStatsRecord]
}


type FeatureValueRecord {
    featureId: Int,
    featureName: String,
    protocolId: ID,
    protocolName: String,
    resultSetId: ID,
    value: FloatNaN
}

type WellDataRecord {
    experimentId: ID,
    experimentName: String
    plateId: ID,
    barcode: String,
    plateTemplateId: ID,
    plateTemplateName: String,
    validationStatus: String,
    approvalStatus: String,
    comment: String,
    wellId: ID,
    wellNr: Int,
    rowNr: Int,
    columnNr: Int,
    wellType: String,
    substanceName: String,
    substanceType: String,
    concentration: FloatNaN,
    isValid: Boolean,
    features: [FeatureValueRecord],
}

type PropertyDTO {
    propertyName: String
    propertyValue: String
}

type ProjectDTO {
    id: ID!
    name: String
    description: String

    createdOn: Date
    createdBy: String
    updatedOn: Date
    updatedBy: String

    tags: [String]
    properties: [PropertyDTO]
}

type ExperimentDTO {
    id: ID
    name: String
    description: String
    status: String
    projectId: ID
    multiploMethod: String
    multiploParameter: String

    createdOn: Date
    createdBy: String
    updatedOn: Date
    updatedBy: String

    tags: [String]
    properties: [PropertyDTO]
}

enum LinkStatus {
    NOT_LINKED
    LINKED
}

enum CalculationStatus {
    CALCULATION_NEEDED
    CALCULATION_OK
    CALCULATION_IN_PROGRESS
    CALCULATION_NOT_POSSIBLE
    CALCULATION_ERROR
}

enum ValidationStatus {
    VALIDATION_NOT_SET
    VALIDATION_NOT_NEEDED
    VALIDATED
    INVALIDATED
}

enum ApprovalStatus {
    APPROVAL_NOT_SET
    APPROVAL_NOT_NEEDED
    APPROVED
    DISAPPROVED
}

enum UploadStatus {
    UPLOAD_NOT_SET
    UPLOAD_NOT_NEEDED
    UPLOADED
}

type PlateDTO {
    id: ID
    barcode: String
    description: String
    experimentId: Int

    rows: Int
    columns: Int
    sequence: Int

    linkStatus: LinkStatus
    linkSource: String
    linkTemplateId: String
    linkTemplateName: String
    linkedOn: Date

    calculationStatus: CalculationStatus
    calculationError: String
    calculatedBy: String
    calculatedOn: Date

    validationStatus: ValidationStatus
    validatedBy: String
    validatedOn: Date
    invalidatedReason: String

    approvalStatus: ApprovalStatus
    approvedBy: String
    approvedOn: Date
    disapprovedReason: String

    uploadStatus: UploadStatus
    uploadedBy: String
    uploadedOn: Date

    createdOn: Date
    createdBy: String
    updatedOn: Date
    updatedBy: String

    tags: [String]
    properties: [PropertyDTO]
}

enum WellStatus {
    ACCEPTED_DEFAULT
    ACCEPTED
    REJECTED_PLATEPREP
    REJECTED_DATACAPTURE
    REJECTED_PHAEDRA
    REJECTED_OUTLIER_PHAEDRA_MANUAL
    REJECTED_OUTLIER_PHAEDRA_AUTO
}

enum StatusCode {
    SCHEDULED
    SUCCESS
    FAILURE
}

type WellSubstanceDTO {
    id: ID
    wellId: ID
    type: String
    name: String
    concentration: Float
}

type WellDTO {
    id: ID
    plateId: ID
    row: Int
    column: Int
    wellNr: Int
    wellType: String
    status: WellStatus
    description: String
    wellSubstance: WellSubstanceDTO
    tags: [String]
    properties: [PropertyDTO]
}

type ErrorDTO {
    timestamp: Date
    exceptionClassName: String
    exceptionMessage: String
    description: String
    featureId: ID
    featureName: String
    sequenceNumber: Int
    formulaId: ID
    formulaName: String
    civType: String
    civVariableName: String
    civSource: String
    exitCode: Int
    statusMessage: String
    featureStatId: ID
    featureStatName: String
    newResultSetId: ID
}

type ResultSetDTO {
    id: ID
    protocolId: ID
    plateId: ID
    measId: ID
    executionStartTimeStamp: Date
    executionEndTimeStamp: Date
    outcome: StatusCode
    errors: [ErrorDTO]
    errorsText: String
}

input StringFilter {
    equals: String
    startsWith: String
    endsWith: String
    contains: String
    regex: String
}

input DateFilter {
    before: Date
    after: Date
    on: Date
}

input MetaDataFilter {
    includes: [String]
}

input IdFilter {
    equals: ID
    in: [ID]
}

input ProjectFilter {
    id: IdFilter
    name: StringFilter

    createdOn: DateFilter
    createdBy: StringFilter
    updatedOn: DateFilter
    updatedBy: StringFilter

    tags: MetaDataFilter
    properties: MetaDataFilter
}

input ExperimentFilter {
    id: IdFilter
    name: StringFilter
    projectId: IdFilter
    projectName: StringFilter

    createdOn: DateFilter
    createdBy: StringFilter
    updatedOn: DateFilter
    updatedBy: StringFilter

    tags: MetaDataFilter
    properties: MetaDataFilter
}

input PlateFilter {
    id: IdFilter
    barcode: StringFilter
    experimentId: IdFilter

    calculationStatus: CalculationStatus
    calculatedBy: StringFilter
    calculatedOn: DateFilter

    validationStatus: ValidationStatus
    validatedBy: StringFilter
    validatedOn: DateFilter

    approvalStatus: ApprovalStatus
    approvedBy: StringFilter
    approvedOn: DateFilter

    uploadStatus: UploadStatus
    uploadedBy: StringFilter
    uploadedOn: DateFilter

    createdOn: DateFilter
    createdBy: StringFilter
    updatedOn: DateFilter
    updatedBy: StringFilter

    tags: MetaDataFilter
    properties: MetaDataFilter
}

input WellFilter {
    id: IdFilter
    plateId: IdFilter
    experimentId: IdFilter
    projectId: IdFilter
    wellType: StringFilter
    status: WellStatus
    wellSubstance: StringFilter
    tags: MetaDataFilter
    properties: MetaDataFilter
}

type Query {
    exportPlateListData(exportPlateDataOptions: ExportPlateDataOptions): [PlateDataRecord]
    exportWellData(exportWellDataOptions: ExportWellDataOptions): [WellDataRecord]
    projects(filter: ProjectFilter): [ProjectDTO]
    experiments(filter: ExperimentFilter): [ExperimentDTO]
    plates(filter: PlateFilter): [PlateDTO]
    wells(filter: WellFilter): [WellDTO]
}
